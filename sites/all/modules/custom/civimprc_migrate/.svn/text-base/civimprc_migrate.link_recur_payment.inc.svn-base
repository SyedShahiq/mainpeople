<?php

class MprcCiviMigrateContributionPayment extends MprcCiviMigrate {
  public function __construct() {
    
    // Always call the parent constructor first for basic setup
    parent::__construct();
    
    // Human-friendly description of your migration process
    $this->description = t('Migrate matches pledges for Recurring contributions & puts data in right places');
 
    // Create a map object for tracking the relationships between source rows
    $this->map = new MigrateSQLMap($this->machineName,
        array(
          'id' => array( 'type' => 'int',
                           'length' => 10,
                           'unsigned' => TRUE,
                           'not null' => TRUE,
                           'alias'   => 'c',
                          )
        ),
        MigrateDestinationTerm::getKeySchema()
      );

    // We are getting data from tables in the Drupal default database - first,
    // set up a query for this data.
    $query = db_select($this->civiDB . 'civicrm_contribution', 'c')
                  ->fields('c',array(
                                'id', 'contribution_status_id', 'total_amount'
                                ));

    $query->leftJoin($this->civiDB . 'civicrm_contribution_recur','cr', 'cr.id = c.contribution_recur_id AND c.contribution_status_id = 1');
    $query->leftJoin($this->civiDB . 'civicrm_pledge_payment','pp', 'c.id = pp.contribution_id');
    $query->fields('pv', array('entity_id'));    
    $query->leftJoin($this->civiDB . 'civicrm_value_pledge_4','pv', 'cr.id = pv.recurring_credit_card_payment_198');
    $query->distinct();
    $query->where("start_date > '2011-08-01'" );
    $query->isNotNull('c.contribution_recur_id');//adding condition to join  was slow
    $query->isNull('pp.pledge_id');//adding condition to join  was slow
    
    // Create a MigrateSource object, which manages retrieving the input data.
    $this->source = new MigrateSourceSQL($query);
   $this->dependencies = array('MprcCiviMigratePledge');
    // Set up our destination 
    $this->destination = new MigrateDestinationCivicrmApi('pledge_payment');
    $this->addFieldMapping('contribution_id', 'id'); 
    $this->addFieldMapping('pledge_id', 'entity_id');
    $this->addFieldMapping('actual_amount', 'total_amount');  
    $this->addFieldMapping( 'status_id','contribution_status_id'); 
    /*
    $this->addFieldMapping('id', 'pledge_id')
                         ->issueGroup("Implementer Issues")
                         ->description("May not be available to map");
   ;       
    
    $this->addFieldMapping('pledge_contribution_type_id', 'contribution_type_id'); 
    $this->addFieldMapping('frequency_unit', 'frequency_unit');    
    $this->addFieldMapping('frequency_interval', 'frequency_interval');  
    $this->addFieldMapping('installments', 'installments');    
    $this->addFieldMapping('start_date', 'start_date'); 
    $this->addFieldMapping('end_date', 'end_date'); 
    $this->addFieldMapping('pledge_create_date', 'create_date');    
    $this->addFieldMapping('create_date', 'create_date');  // belt & braces
    $this->addFieldMapping('modified_date', 'modified_date');
    $this->addFieldMapping('scheduled_date', 'next_sched_contribution');  
    $this->addFieldMapping('cancel_date', 'cancel_date'); 
    $this->addFieldMapping('currency')->defaultValue('USD');
*/
      }
  /*
   * Inwards handling on address creation
   */
  public function prepare($entity, $row) {

    } 
}